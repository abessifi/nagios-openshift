#!/bin/python
# -*- coding: utf-8 -*-
import subprocess
import yaml
import sys

'''
Mide la disponibilidad de los nodos de OpenShift desde un punto de vista global.

Para que la solución funcione tiene que haber al menos un nodo en cada región.
Dentro de cada zona debe haber al menos un 50% de los nodos.

Niveles de alertado:
* OK: Todos los nodos funcionando
* WARNING: Numero de nodos por region entre el 99% y el 50%.
* CRITICAL: Numero de nodos por region por debajo del 50%

Vamos a recorrer la salida que obtenemos de "oc get nodes -o yaml" contando
los nodos por zona y region teniendo en cuenta su estado y si son o no
scheduleables.
'''

key_status_type = "Ready"
expected_status_type = {
    "Ready": {
        "status": "True",
        "alert": "critical"
    },
    "OutOfDisk": {
        "status": "False",
        "alert": "warning"
    }
}

p = subprocess.Popen(["oc", "get", "nodes", "-o", "yaml"],
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE)
out, err = p.communicate()
nodes = yaml.load(out)

i = 0
region_status = {}
while (i < len(nodes["items"])):
    if nodes["items"][i]["kind"] == "Node":
        scheduleable = 1
        if not "unschedulable" in nodes["items"][i]["spec"]:
            scheduleable = 1
        elif nodes["items"][i]["spec"]["unschedulable"] != "true":
            scheduleable = 0

        # Check node schedulable
        if scheduleable == 1:
            # Add node to dictionary
            region_name = nodes["items"][i]["metadata"]["labels"]["region"]
            zone_name = nodes["items"][i]["metadata"]["labels"]["zone"]
            if region_name in region_status:
                if zone_name in region_status[region_name]:
                    region_status[region_name][zone_name]["total"] = region_status[region_name][zone_name]["total"] + 1
                else:
                    region_status[region_name][zone_name] = { "total": 1, "ok": 0 }
            else:
                region_status[region_name] = { zone_name: { "total": 1, "ok": 0 }}

            # Add status node to dictionary based on key_status_type value
            j = 0
            key_status_type_checked = 0
            while (j < len(nodes["items"][i]["status"]["conditions"]) and key_status_type_checked == 0):
                if (nodes["items"][i]["status"]["conditions"][j]["type"] == key_status_type):
                    if nodes["items"][i]["status"]["conditions"][j]["status"] == expected_status_type[key_status_type]["status"]:
                        region_status[region_name][zone_name]["ok"] = region_status[region_name][zone_name]["ok"] + 1
                j = j + 1
    i = i + 1

#print region_status
region_problem = ""
region_availability = 1.0
regions = region_status.keys()
i = 0
while i < len(regions) and region_availability == 1.0:
    region = regions[i]
    total = 0
    ok = 0
    for zone in region_status[region]:
        total = region_status[region][zone]["total"] + total
        ok = region_status[region][zone]["ok"] + ok
        region_availability = float(ok)/float(total)
    if region_availability < 1.0:
        region_problem = region
    i = i + 1



#print region_availability
if region_availability < 0.5:
    print (("CRITICAL- " + str(region_availability*100) + "% availability in " + region_problem + " region."))
    sys.exit(2)
elif region_availability < 1.0:
    print (("WARNING- " + str(region_availability*100) + "% availability in " + region_problem + " region."))
    sys.exit(1)
elif region_availability == 1.0:
    print ("OK- All configured regions and zones are OK")
    sys.exit(0)
else:
    print ("UNKNOWN- no information about regions and zones")
    sys.exit(3)
